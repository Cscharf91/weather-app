{"version":3,"sources":["components/SearchBar.js","components/Header.js","components/WeatherCard.js","App.js","serviceWorker.js","index.js"],"names":["SearchBar","props","className","onSubmit","handleSubmit","htmlFor","type","onChange","changeSearch","Header","WeatherCard","city","description","alt","src","imageURL","temp","degrees","charAt","App","useState","searchTerm","setSearchTerm","setCity","background","setBackground","setDegrees","useEffect","getInfo","setTemp","setDescription","setImageURL","a","fetch","response","json","data","convertToFahrenheit","main","convertToCelsius","properCapitalization","findImgURL","weather","getBG","console","log","icon","newTerm","toLowerCase","firstLetter","toUpperCase","slice","Math","round","e","preventDefault","target","value","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c984096b.chunk.js","sourcesContent":["import React from 'react';\n\nconst SearchBar = (props) => {\n    return (\n        <div className=\"searchbar\">\n            <form onSubmit={props.handleSubmit}>\n                <label htmlFor=\"search\">Search: </label>\n                <input type=\"text\" onChange={props.changeSearch} /><br />\n                <button type=\"submit\">Submit</button>\n            </form>\n        </div>\n    );\n}\n\nexport default SearchBar;","import React from 'react';\n\nconst Header = () => {\n    return (\n        <header className=\"hero\">\n            <h3>Weather App</h3>\n            <p>By Cory S.</p>\n        </header>\n    );\n};\n\nexport default Header;","import React from 'react';\n\nconst WeatherCard = (props) => {\n    return (\n        <div className=\"weather-card\">\n            <h1>{props.city}</h1>\n            <div className=\"weather-info\">\n                <p className=\"weather-description\">{props.description} <img alt={props.description} src={props.imageURL} /></p>\n                <p className=\"temp\">{props.temp} Â°{props.degrees.charAt(0)}</p>\n            </div>\n        </div>\n    );\n}\n\nexport default WeatherCard;","import React, { useEffect, useState } from 'react';\nimport SearchBar from './components/SearchBar';\nimport Header from './components/Header';\nimport WeatherCard from './components/WeatherCard';\nimport './App.css';\n\nfunction App() {\n  const [searchTerm, setSearchTerm] = useState('brooklyn');\n  const [city, setCity] = useState('Brooklyn')\n  const [background, setBackground] = useState('');\n\n  const [degrees, setDegrees] = useState('Fahrenheit');\n  useEffect(() => {\n    getInfo();\n  }, [degrees])\n\n  const [temp, setTemp] = useState('');\n  const [description, setDescription] = useState('');\n  const [imageURL, setImageURL] = useState('');\n\n  const getInfo = async () => {\n    try {\n      const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${searchTerm}&appid=e37f24ef6174dba03b645be482f88b30`)\n      const data = await response.json();\n      const temp = degrees === 'Fahrenheit' ? convertToFahrenheit(data.main.temp) : convertToCelsius(data.main.temp);\n      properCapitalization();\n      setTemp(temp);\n      findImgURL(data);\n      setDescription(data.weather[0].main);\n      getBG(data);\n    } catch {\n      console.log('Data not found');\n    }\n  }\n\n  const getBG = (data) => {\n    let icon = data.weather[0].icon;\n    if (icon === '01d' \n      ||icon === '01n'\n      ||icon === '02d'\n      ||icon === '02n') {\n      setBackground('sunny');\n    }\n    if (icon === '03d'\n    || icon === '03n'\n    || icon === '04d'\n    || icon === '04n') {\n      setBackground('cloudy');\n    }\n    if (icon === '09d'\n    || icon === '09n'\n    || icon === '10d'\n    || icon === '10n'\n    || icon === '11d'\n    || icon === '11n'\n    || icon === '50d'\n    || icon === '50n') {\n      setBackground('rain');\n    }\n    if (icon === '13d' || icon === '13n') {\n      setBackground('snow');\n    }\n  }\n\n  const findImgURL = (data) => {\n    let icon = data.weather[0].icon;\n    console.log(icon);\n    setImageURL(`http://openweathermap.org/img/wn/${icon}.png`);\n  }\n\n  const properCapitalization = () => {\n    let newTerm = searchTerm.toLowerCase();\n    let firstLetter = newTerm.charAt(0).toUpperCase();\n    setCity(firstLetter + newTerm.slice(1));\n  }\n\n  const changeScale = () => {\n    degrees === 'Fahrenheit' ? setDegrees('Celsius') : setDegrees('Fahrenheit');\n  }\n\n  const convertToCelsius = (temp) => {\n    let newTemp = Math.round(temp - 273.15);\n    return newTemp;\n  }\n\n  const convertToFahrenheit = (temp) => {\n    let newTemp = Math.round(temp * 9 / 5 - 459.67);\n    return newTemp;\n  }\n\n  const changeSearch = (e) => {\n    setSearchTerm(e.target.value);\n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    getInfo();\n  }\n\n  return (\n    <div className=\"App\">\n      <div className={background}>\n        <Header />\n        <SearchBar handleSubmit={handleSubmit} changeSearch={changeSearch} />\n        <WeatherCard city={city} temp={temp} degrees={degrees} description={description} imageURL={imageURL} />\n        <button onClick={changeScale}>{degrees}</button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}